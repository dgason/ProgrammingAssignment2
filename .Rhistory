install.packages('kernsmooth')
2
install.packages('KernSmooth')
library('KernSmooth')
q()
37 / 92
x <- 42
x
x / 92
result = x / 92
result
sum(1, 3, 5, 7, 9)
help(sin)
example(sin)
list.files()
bob = c('a', 'b', 'c')
bob
bob[1]
files.list()
file.list()
list.files()
help(list)
help(c)
y = 'foo'
y
y = 42
y
y / 3
z = 'foo'
z / 3
result
list <- ('moe', 'larry', 'curly')
list <- ['moe', 'larry', 'curly']
stooge <- 'moe'
stooge
stooges <- c['moe', 'larry', 'curly']
stooges <- c('moe', 'larry', 'curly')
stooges[1]
x <- 1:20
x
y <- c(1.7, TRUE)
y
x <- 1:6
as.numeric(x)
x <- as.numeric(x)
x <- as.character(x)
fct <- factor(c("yes", "yes", "no", "yes", "no"))
fct
fct.levels
attr(fct)
frm <- data.frame(foo=1:4, bar=c(T, T, F, T))
frm
m <- matrix(1:6, 2, 3)
m
m[,2]
m[1,]
5 + 7
add2 <- function(x,y) {
x + y
}
add2(2,2)
above10 <- function(x) {
mySubset <- x > 10
x[mySubset]
}
above10(c(1,3,5,7,9,11,13))
15:2
args(cat)
args(paste)
?paste
search
search()
r <- rnorm(1000)
r
z
y
x
z <- rep(NA, 1000)
my_data <- sample(c(r,z), 100)
my_data
x
x <- 1:40
x
x[!c(2,10)]
x[c(-2,-10)]
getwd()
setwd("./DataScience/Coursera/02.RProgramming/assignment2/ProgrammingAssignment2/")
mtx <- cbind(c(1,2), c(3,4))
mtx
solve(mtx)
x$setmatrix(m)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(mtx) m <<- mtx
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
}
if(!is.null(m)) {
message("getting cached data")
return(m)
}
}
mat <- matrix(1:4, 2,2)
mat
solve(mat)
matObj <- makeCacheMatrix(mat)
cacheSolve(matObj)
cachesolve(matObj)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
cacheSolve(matObj)
cacheSolve(matObj)
}
source('~/DataScience/Coursera/02.RProgramming/assignment2/ProgrammingAssignment2/cachematrix.R')
